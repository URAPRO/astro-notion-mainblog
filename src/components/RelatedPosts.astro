---
import type { Post, SelectProperty } from '../lib/interfaces.ts';
import { getPostLink, filePath, tokenizeText, calculateIDF } from '../lib/blog-helpers.ts';

export interface Props {
  currentPost: Post;
  allPosts: Post[];
  maxPosts?: number;
}

const { currentPost, allPosts, maxPosts = 4 } = Astro.props;

interface ScoredPost extends Post {
  score: number;
  tagScore: number;
  contentScore: number;
}

// Helper function to calculate common tags between two sets of tags
function calculateCommonTags(tags1: SelectProperty[] | undefined, tags2: SelectProperty[] | undefined): number {
  if (!tags1 || !tags2 || tags1.length === 0 || tags2.length === 0) {
    return 0;
  }
  return tags1.filter(t1 => tags2.some(t2 => t2.name === t1.name)).length;
}

// コンテンツ類似度計算のための簡易実装
function calculateSimpleContentSimilarity(post1: Post, post2: Post): number {
  // タイトルとExcerpt（抜粋）を使って類似度を計算
  const text1 = `${post1.Title} ${post1.Title} ${post1.Excerpt || ''}`.toLowerCase();
  const text2 = `${post2.Title} ${post2.Title} ${post2.Excerpt || ''}`.toLowerCase();
  
  // 単語をトークン化
  const words1 = tokenizeText(text1);
  const words2 = tokenizeText(text2);
  
  // 共通単語数を計算
  const set1 = new Set(words1);
  const set2 = new Set(words2);
  const commonWords = [...set1].filter(word => set2.has(word)).length;
  
  // Jaccard係数（共通単語数 / 全単語数）
  const totalUniqueWords = new Set([...set1, ...set2]).size;
  
  return totalUniqueWords > 0 ? commonWords / totalUniqueWords : 0;
}

let relatedPostsToDisplay: Post[] = [];

// --- 1. 手動で設定された関連記事を取得 ---
if (currentPost.RelatedPostPageIds && currentPost.RelatedPostPageIds.length > 0) {
  relatedPostsToDisplay = currentPost.RelatedPostPageIds
    .map(pageId => allPosts.find(p => p.PageId === pageId))
    .filter(p => p !== undefined && p.PageId !== currentPost.PageId) as Post[];
}

// --- 2. スコアリングベースの関連記事選択 ---
let candidatePosts: ScoredPost[] = [];

// 手動設定されていない記事をスコアリング
const manualPostIds = new Set(relatedPostsToDisplay.map(p => p.PageId));

allPosts.forEach(post => {
  // 自分自身と手動設定済みの記事は除外
  if (post.PageId === currentPost.PageId || manualPostIds.has(post.PageId)) {
    return;
  }
  
  let tagScore = 0;
  let contentScore = 0;
  
  // InternalTagsスコア（重み: 10）
  if (currentPost.InternalTags && post.InternalTags) {
    const commonInternalTags = calculateCommonTags(currentPost.InternalTags, post.InternalTags);
    tagScore += commonInternalTags * 10;
  }
  
  // 表示Tagsスコア（重み: 3）
  if (currentPost.Tags && post.Tags) {
    const commonDisplayTags = calculateCommonTags(currentPost.Tags, post.Tags);
    tagScore += commonDisplayTags * 3;
  }
  
  // コンテンツ類似度スコア（重み: 50）
  contentScore = calculateSimpleContentSimilarity(currentPost, post) * 50;
  
  // 総合スコア = タグスコア + コンテンツ類似度スコア
  const totalScore = tagScore + contentScore;
  
  // スコアが0より大きい記事のみ候補に追加
  if (totalScore > 0) {
    candidatePosts.push({
      ...post,
      score: totalScore,
      tagScore,
      contentScore
    });
  }
});

// --- 3. スコアの高い順にソート ---
candidatePosts.sort((a, b) => {
  // 総合スコアでソート
  if (b.score !== a.score) {
    return b.score - a.score;
  }
  // 同点の場合はタグスコアを優先
  if (b.tagScore !== a.tagScore) {
    return b.tagScore - a.tagScore;
  }
  // それでも同点の場合は新しい記事を優先
  return new Date(b.Date).getTime() - new Date(a.Date).getTime();
});

// --- 4. 最終的な関連記事リストを作成 ---
// 手動設定を優先し、残りの枠をスコア順で埋める
for (const scoredPost of candidatePosts) {
  if (relatedPostsToDisplay.length >= maxPosts) {
    break;
  }
  relatedPostsToDisplay.push(scoredPost);
}

// 最大投稿数を超えていないか確認
if (relatedPostsToDisplay.length > maxPosts) {
  relatedPostsToDisplay = relatedPostsToDisplay.slice(0, maxPosts);
}

// デバッグ情報（開発時のみ）
if (import.meta.env.DEV && relatedPostsToDisplay.length > 0) {
  console.log('Related posts for:', currentPost.Title);
  relatedPostsToDisplay.forEach((post, index) => {
    const scored = candidatePosts.find(p => p.PageId === post.PageId);
    if (scored) {
      console.log(`${index + 1}. ${post.Title} - Total: ${scored.score.toFixed(2)}, Tags: ${scored.tagScore}, Content: ${scored.contentScore.toFixed(2)}`);
    } else {
      console.log(`${index + 1}. ${post.Title} - (Manual)`);
    }
  });
}

---

{relatedPostsToDisplay && relatedPostsToDisplay.length > 0 && (
  <div class="related-posts">
    <h3 class="related-posts-title">関連記事</h3>
    <div class="related-posts-list">
      {relatedPostsToDisplay.map((post: Post) => (
        <div class="related-post-item">
          <div class="related-post-card">
            <div class="related-post-image-wrapper">
              {post.FeaturedImage?.Url && (
                <img 
                  src={filePath(new URL(post.FeaturedImage.Url))} 
                  alt={post.Title} 
                  class="related-post-image" 
                  loading="lazy"
                  width={post.FeaturedImage.Width || 150} 
                  height={post.FeaturedImage.Height || 100}
                />
              )}
            </div>
            <div class="related-post-content">
              <h4 class="related-post-title">{post.Title}</h4>
            </div>
            <a class="related-post-link" href={getPostLink(post)} target={post.ExternalLink ? "_blank" : undefined}></a>
          </div>
        </div>
      ))}
    </div>
  </div>
)}

<style>
  .related-posts {
    margin-top: 3rem;
    padding-top: 1.5rem;
    border-top: 1px solid #eee;
  }
  .related-posts-title {
    font-size: 1.3rem;
    margin-bottom: 1rem;
    color: var(--fg);
  }
  .related-posts-list {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }
  .related-post-item {
    width: 100%;
  }
  .related-post-card {
    position: relative;
    display: flex;
    background: #fff;
    border-radius: 6px;
    padding: 0.5rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    transition: all 0.3s ease-in-out;
    border: 1px solid #f0f0f0;
    flex-direction: row;
    align-items: center;
    gap: 0.8rem;
    height: 100%;
  }
  .related-post-card:hover {
    box-shadow: 0 6px 16px rgba(0,0,0,0.1);
    border-color: #e5e5e5;
    transform: translateY(-4px);
  }
  .related-post-image-wrapper {
    width: 60px;
    height: 60px;
    flex-shrink: 0;
    border-radius: 4px;
    overflow: hidden;
    background: #f8f8f8;
  }
  .related-post-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .related-post-content {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    min-width: 0;
  }
  .related-post-title {
    margin: 0;
    font-size: 0.9rem;
    line-height: 1.4;
    font-weight: 500;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .related-post-link {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    z-index: 1;
  }
  
  @media (max-width: 768px) {
    .related-posts-list {
      grid-template-columns: 1fr;
    }
    .related-post-card {
      padding: 0.6rem;
    }
    .related-post-image-wrapper {
      width: 70px;
      height: 70px;
    }
    .related-post-title {
      font-size: 1rem;
    }
  }
</style> 