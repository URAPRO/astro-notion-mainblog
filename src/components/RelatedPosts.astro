---
import type { Post, SelectProperty } from '../lib/interfaces.ts';
import { getPostLink, filePath } from '../lib/blog-helpers.ts';

export interface Props {
  currentPost: Post;
  allPosts: Post[];
  maxPosts?: number;
}

const { currentPost, allPosts, maxPosts = 4 } = Astro.props;

interface ScoredPost extends Post {
  score: number;
}

// Helper function to calculate common tags between two sets of tags
function calculateCommonTags(tags1: SelectProperty[] | undefined, tags2: SelectProperty[] | undefined): number {
  if (!tags1 || !tags2 || tags1.length === 0 || tags2.length === 0) {
    return 0;
  }
  return tags1.filter(t1 => tags2.some(t2 => t2.name === t1.name)).length;
}

let relatedPostsToDisplay: Post[] = [];

// --- 1. 手動で設定された関連記事を取得 ---
// currentPost.RelatedPostPageIds に基づいて、手動で指定された関連記事をrelatedPostsToDisplayの初期リストとして設定します。
// この際、カレント記事自身は除外します。
if (currentPost.RelatedPostPageIds && currentPost.RelatedPostPageIds.length > 0) {
  relatedPostsToDisplay = currentPost.RelatedPostPageIds
    .map(pageId => allPosts.find(p => p.PageId === pageId))
    .filter(p => p !== undefined && p.PageId !== currentPost.PageId) as Post[];
}

// --- 2. InternalTags に基づく関連記事のスコアリング ---
// allPosts から、InternalTags がカレント記事と共通する記事を候補として収集し、スコアリングします。
// スコアは共通するInternalTagsの数に重み（例: 10）を乗算します。
// カレント記事自身と、既に手動で追加された記事は除外します。
let scoredByInternalTags: ScoredPost[] = [];
if (currentPost.InternalTags && currentPost.InternalTags.length > 0) {
  allPosts.forEach(post => {
    if (post.PageId === currentPost.PageId || relatedPostsToDisplay.some(rp => rp.PageId === post.PageId)) {
      return; // 自分自身と既に手動で選ばれた記事は除く
    }

    const commonInternalTagsCount = calculateCommonTags(currentPost.InternalTags, post.InternalTags);
    if (commonInternalTagsCount > 0) {
      scoredByInternalTags.push({ ...post, score: commonInternalTagsCount * 10 });
    }
  });
}

// --- 3. Tags に基づく関連記事のスコアリング ---
// allPosts から、Tags（表示用タグ）がカレント記事と共通する記事を候補として収集し、スコアリングします。
// スコアは共通するTagsの数です（重みは1）。
// カレント記事自身、手動で追加された記事、InternalTagsで既にスコアリングされた記事は除外します。
let scoredByDisplayTags: ScoredPost[] = [];
if (currentPost.Tags && currentPost.Tags.length > 0) {
  allPosts.forEach(post => {
    if (
      post.PageId === currentPost.PageId ||
      relatedPostsToDisplay.some(rp => rp.PageId === post.PageId) ||
      scoredByInternalTags.some(sit => sit.PageId === post.PageId)
    ) {
      return; // 自分自身、手動設定済み、InternalTagsでスコアリング済みの記事は除く
    }

    const commonDisplayTagsCount = calculateCommonTags(currentPost.Tags, post.Tags);
    if (commonDisplayTagsCount > 0) {
      scoredByDisplayTags.push({ ...post, score: commonDisplayTagsCount });
    }
  });
}

// --- 4. スコアリングされた記事候補をマージしてソート ---
// InternalTagsとTagsでスコアリングされた記事を一つのリストにまとめ、スコアの高い順にソートします。
let candidatePosts: ScoredPost[] = [...scoredByInternalTags, ...scoredByDisplayTags];
candidatePosts.sort((a, b) => b.score - a.score);

// --- 5. 最終的な関連記事リストを作成 ---
// 手動で設定された関連記事を優先し、残りの枠をスコア順に候補記事で埋めていきます。
// 最終的なリストの投稿数が maxPosts を超えないようにし、重複も排除します。
const finalPostIds = new Set(relatedPostsToDisplay.map(p => p.PageId));

for (const scoredPost of candidatePosts) {
  if (relatedPostsToDisplay.length >= maxPosts) {
    break;
  }
  if (!finalPostIds.has(scoredPost.PageId)) {
    relatedPostsToDisplay.push(scoredPost);
    finalPostIds.add(scoredPost.PageId);
  }
}

// 念のため、最終リストの件数がmaxPostsを超えていないか確認し、超えていれば調整
if (relatedPostsToDisplay.length > maxPosts) {
  relatedPostsToDisplay = relatedPostsToDisplay.slice(0, maxPosts);
}

---

{relatedPostsToDisplay && relatedPostsToDisplay.length > 0 && (
  <div class="related-posts">
    <h3 class="related-posts-title">関連記事</h3>
    <div class="related-posts-list">
      {relatedPostsToDisplay.map((post: Post) => (
        <div class="related-post-item">
          <div class="related-post-card">
            <div class="related-post-image-wrapper">
              {post.FeaturedImage?.Url && (
                <img 
                  src={filePath(new URL(post.FeaturedImage.Url))} 
                  alt={post.Title} 
                  class="related-post-image" 
                  loading="lazy"
                  width={post.FeaturedImage.Width || 150} 
                  height={post.FeaturedImage.Height || 100}
                />
              )}
            </div>
            <div class="related-post-content">
              <h4 class="related-post-title">{post.Title}</h4>
            </div>
            <a class="related-post-link" href={getPostLink(post)} target={post.ExternalLink ? "_blank" : undefined}></a>
          </div>
        </div>
      ))}
    </div>
  </div>
)}

<style>
  .related-posts {
    margin-top: 3rem;
    padding-top: 1.5rem;
    border-top: 1px solid #eee;
  }
  .related-posts-title {
    font-size: 1.3rem;
    margin-bottom: 1rem;
    color: var(--fg);
  }
  .related-posts-list {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }
  .related-post-item {
    width: 100%;
  }
  .related-post-card {
    position: relative;
    display: flex;
    background: #fff;
    border-radius: 6px;
    padding: 0.5rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    transition: all 0.3s ease-in-out;
    border: 1px solid #f0f0f0;
    flex-direction: row;
    align-items: center;
    gap: 0.8rem;
    height: 100%;
  }
  .related-post-card:hover {
    box-shadow: 0 6px 16px rgba(0,0,0,0.1);
    border-color: #e5e5e5;
    transform: translateY(-4px);
  }
  .related-post-image-wrapper {
    width: 60px;
    height: 60px;
    flex-shrink: 0;
    border-radius: 4px;
    overflow: hidden;
    background: #f8f8f8;
  }
  .related-post-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .related-post-content {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    min-width: 0;
  }
  .related-post-title {
    margin: 0;
    font-size: 0.9rem;
    line-height: 1.4;
    font-weight: 500;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .related-post-link {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    z-index: 1;
  }
  
  @media (max-width: 768px) {
    .related-posts-list {
      grid-template-columns: 1fr;
    }
    .related-post-card {
      padding: 0.6rem;
    }
    .related-post-image-wrapper {
      width: 70px;
      height: 70px;
    }
    .related-post-title {
      font-size: 1rem;
    }
  }
</style> 