---
import type { Post } from '../lib/interfaces.ts'
import { filePath } from '../lib/blog-helpers'
export interface Props {
  post: Post
  enableLink: boolean
}

const { post} = Astro.props

let imageUrl = ''
let webpUrl = ''
let thumbnailUrl = ''

if (post.FeaturedImage && post.FeaturedImage.Url) {
  if (import.meta.env.DEV) {
    imageUrl = post.FeaturedImage.Url
  } else {
    const originalPath = filePath(new URL(post.FeaturedImage.Url))
    imageUrl = originalPath
    
    // WebPとサムネイルのパスを生成
    const pathParts = originalPath.split('.')
    const ext = pathParts.pop()
    const basePath = pathParts.join('.')
    
    // WebPファイルが存在する可能性があるパス
    if (ext && ext.toLowerCase() !== 'webp') {
      webpUrl = `${basePath}.webp`
    }
    
    // サムネイルのパス
    thumbnailUrl = `${basePath}-thumb.webp`
  }
}
---

{
  imageUrl &&
    (
    <div class="post-featured-image">
      <picture>
        {webpUrl && <source srcset={webpUrl} type="image/webp" />}
        <img 
          src={imageUrl} 
          alt="Featured image of the post" 
          loading="lazy"
          decoding="async"
          data-src={imageUrl}
          data-thumbnail={thumbnailUrl}
          class="lazy-image"
        />
      </picture>
      <noscript>
        <img src={imageUrl} alt="Featured image of the post" />
      </noscript>
    </div>
    )
}

<style>
  .post-featured-image {
    padding: 0;
    border-radius: 4px;
    overflow: hidden;
    aspect-ratio: 1/1;
    background: #f8f8f8;
    width: 100%;
    height: 88px;
    position: relative;
  }
  
  .post-featured-image picture,
  .post-featured-image img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: contain;
  }
  
  .post-featured-image img {
    transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
  }
  
  .post-featured-image img.lazy-loading {
    filter: blur(5px);
    opacity: 0.8;
  }
  
  .post-featured-image img.lazy-loaded {
    filter: blur(0);
    opacity: 1;
  }
  
  .post-featured-image:hover img {
    transform: scale(1.05);
  }
</style>

<script>
  // レイジーローディングの改善版実装
  if ('IntersectionObserver' in window) {
    const lazyImages = document.querySelectorAll('img.lazy-image');
    
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          const thumbnail = img.getAttribute('data-thumbnail');
          const fullSrc = img.getAttribute('data-src');
          
          // サムネイルが存在する場合は、まずサムネイルを読み込む
          if (thumbnail && fullSrc) {
            img.classList.add('lazy-loading');
            
            // サムネイルを読み込む
            const thumbnailImg = new Image();
            thumbnailImg.onload = () => {
              img.src = thumbnail;
              
              // フルサイズ画像を読み込む
              const fullImg = new Image();
              fullImg.onload = () => {
                img.src = fullSrc;
                img.classList.remove('lazy-loading');
                img.classList.add('lazy-loaded');
              };
              fullImg.src = fullSrc;
            };
            thumbnailImg.src = thumbnail;
          } else if (fullSrc) {
            // サムネイルがない場合は直接フルサイズを読み込む
            img.src = fullSrc;
            img.classList.add('lazy-loaded');
          }
          
          observer.unobserve(img);
        }
      });
    }, {
      rootMargin: '50px'
    });
    
    lazyImages.forEach(img => imageObserver.observe(img));
  }
</script>
