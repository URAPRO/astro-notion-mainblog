---
import { ENABLE_LIGHTBOX } from '../../server-constants.ts'
import * as interfaces from '../../lib/interfaces'
import { filePath, filePathWithSlug } from '../../lib/blog-helpers'
import { getFileMapping } from '../../lib/notion/client'
import Caption from './Caption.astro'

export interface Props {
  block: interfaces.Block
  post?: interfaces.Post
  imageIndex?: number
  blockIdToFileMappings?: Record<string, any>
}

const { block, post, imageIndex, blockIdToFileMappings = {} } = Astro.props

let image = ''
if (block.Image?.External) {
  image = block.Image.External.Url
} else if (block.Image?.File) {
  // ブロックIDに対応するファイル名マッピングがあるか確認
  const mapping = blockIdToFileMappings[block.Id]
  
  if (mapping && mapping.originalFilename && mapping.newFilename && mapping.dirPath) {
    // マッピング情報が存在する場合は、新しいファイル名を使用
    image = `${mapping.dirPath}/${mapping.newFilename}`
  } else {
    // メモリ内マッピングがない場合は、ファイルシステムから取得を試みる
    try {
      const urlPath = new URL(block.Image.File.Url).pathname
      const persistentMapping = getFileMapping(urlPath)
      
      if (persistentMapping && persistentMapping.newFilename) {
        // 永続化されたマッピング情報が存在する場合は、新しいファイル名を使用
        image = `${persistentMapping.dirPath}/${persistentMapping.newFilename}`
      } else if (post && post.Slug && imageIndex !== undefined) {
        // マッピングが存在せず、post情報とimageIndexがある場合は、slugに基づいたパスを使用
        image = filePathWithSlug(new URL(block.Image.File.Url), post, imageIndex)
      } else {
        // どちらでもない場合は通常のfilePathを使用
        image = filePath(new URL(block.Image.File.Url))
      }
    } catch (error) {
      // エラーが発生した場合はデフォルトのパスを使用
      if (post && post.Slug && imageIndex !== undefined) {
        image = filePathWithSlug(new URL(block.Image.File.Url), post, imageIndex)
      } else {
        image = filePath(new URL(block.Image.File.Url))
      }
    }
  }
}

// widthに関する情報があれば抽出し、Captionデータからは削除する
let width = ''
if (block.Image?.Caption?.[0]?.Text?.Content) {
  let caption = block.Image.Caption[0].Text.Content;
  let match = caption.match(/^size(\d+)([\s\S]*)/);
  if (match){
    width = match[1].trim() + 'px';
    block.Image.Caption[0].Text.Content = match[2].trim();
  }
}
---

<figure class="image">
  {
    image && block.Image && (
      <div>
        <div>
          {ENABLE_LIGHTBOX ? (
            <a data-fslightbox href={image} data-type="image">
              <img src={image} alt="Image in a image block" {width} loading="lazy" />
            </a>
          ) : (
            <img src={image} alt="Image in a image block" {width} loading="lazy" />
          )}
        </div>
        <Caption richTexts={block.Image.Caption} />
      </div>
    )
  }
</figure>

<style>
  .image {
    display: flex;
    margin: 0.2rem auto 0;
  }
  .image > div {
    margin: 0 auto;
  }
  .image > div > div {
  }
  .image > div > div img {
    display: block;
    max-width: 100%;
  }
</style>
