---
import { ENABLE_LIGHTBOX } from '../../server-constants.ts'
import * as interfaces from '../../lib/interfaces'
import { filePath } from '../../lib/blog-helpers'
import Caption from './Caption.astro'

export interface Props {
  block: interfaces.Block
  slug?: string 
  imageIndex?: number
}

const { block, slug, imageIndex } = Astro.props

let image = ''
if (block.Image?.External) {
  image = block.Image.External.Url
} else if (block.Image?.File) {
  // ビルド時と開発時の両方で動作するよう修正
  image = filePath(new URL(block.Image.File.Url))
}

// widthとaltテキストに関する情報を抽出し、Captionデータからは削除する
let width = '';
let altText = "Image from blog post"; // デフォルトaltテキスト
let displayCaption = ''; // 表示用キャプション

if (block.Image?.Caption && block.Image.Caption.length > 0) {
  let captionInput = block.Image.Caption.map(c => c.PlainText).join('').trim();

  // 1. alt の抽出 (例: alt:テキスト)
  // alt: の値は、size:が出現する前まで、または文字列の最後までとする
  const altRegex = /alt:((?:(?!size:).)+)/i; 
  const altMatch = captionInput.match(altRegex);
  if (altMatch && altMatch[1]) {
    altText = altMatch[1].trim();
    // altMatch[0] には "alt:テキスト" 全体が含まれるので、それを削除
    captionInput = captionInput.replace(altMatch[0], '').trim(); 
  }

  // 2. width(size) の抽出 (例: size:数字px または size数字)
  // captionInput は alt:部分が除去された後の文字列
  const sizeRegex = /(?:size:\s*|size\s*)(\d+)(px)?/i;
  const sizeMatch = captionInput.match(sizeRegex);
  if (sizeMatch && sizeMatch[1]) {
    width = sizeMatch[1].trim() + (sizeMatch[2] || 'px');
    // sizeMatch[0] には "size:数字px" 全体が含まれるので、それを削除
    captionInput = captionInput.replace(sizeMatch[0], '').trim(); 
  }
  
  // 3. 残ったcaptionInputが表示用キャプション
  displayCaption = captionInput;

  // もしaltTextがデフォルトのままで、displayCaptionに何かあれば、それをaltTextにも使う
  // (上記でalt指定があればaltTextは更新されているので、この条件は主にalt指定なしの場合に機能)
  if (altText === "Image from blog post" && displayCaption) {
    altText = displayCaption;
    // この場合、表示用キャプションは空にするか、altTextと同じにするか選択。今回は空にしてみる。
    displayCaption = ''; 
  }
  
  // block.Image.Captionを更新して、Captionコンポーネントが表示用キャプションのみを扱うようにする
  if (block.Image.Caption[0]?.Text) {
    if (displayCaption) {
      block.Image.Caption[0].Text.Content = displayCaption;
    } else {
      block.Image.Caption = []; // 空の配列を代入
    }
  }

} else if (block.Image?.File?.Url) {
  try {
    const urlParts = new URL(block.Image.File.Url).pathname.split('/');
    altText = decodeURIComponent(urlParts[urlParts.length - 1]);
  } catch {}
} else if (block.Image?.External?.Url) {
  try {
    const urlParts = new URL(block.Image.External.Url).pathname.split('/');
    altText = decodeURIComponent(urlParts[urlParts.length - 1]);
  } catch {}
}

---

<figure class="image">
  {
    image && (
      <div>
        <div>
          {ENABLE_LIGHTBOX ? (
            <a data-fslightbox href={image} data-type="image">
              <img src={image} alt={altText} {width} loading="lazy" />
            </a>
          ) : (
            <img src={image} alt={altText} {width} loading="lazy" />
          )}
        </div>
        {block.Image?.Caption && <Caption richTexts={block.Image.Caption} />}
      </div>
    )
  }
</figure>

<style>
  .image {
    display: flex;
    margin: 0.2rem auto 0;
  }
  .image > div {
    margin: 0 auto;
  }
  .image > div > div {
  }
  .image > div > div img {
    display: block;
    max-width: 100%;
  }
</style>
