---
import * as interfaces from '../../lib/interfaces.ts'
import {
  getPosts,
  getAllPosts,
  getRankedPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile,
} from '../../lib/notion/client.ts'
import {
  getPostLink,
  getPostFullLink,
  filePath,
  extractTargetBlocks,
  getStaticFilePath,
} from '../../lib/blog-helpers.ts'
import { SocialShareButtons } from '../../components/ShareButton.tsx';
import Layout from '../../layouts/Layout.astro'
import PostDate from '../../components/PostDate.astro'
import PostUpdateDate from '../../components/PostUpdateDate.astro'
import PostTags from '../../components/PostTags.astro'
import PostTitle from '../../components/PostTitle.astro'
import PostBody from '../../components/PostBody.astro'
import PostRelativeLink from '../../components/PostRelativeLink.astro'
import BlogPostsLink from '../../components/BlogPostsLink.astro'
import BlogTagsLink from '../../components/BlogTagsLink.astro'
import TableOfContentsSidebar from '../../components/TableOfContentsSidebar.astro';
import styles from '../../styles/blog.module.css'
import { Fragment } from 'react'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error(`Post not found. slug: ${slug}`)
}

const [blocks, allPosts, rankedPosts, recentPosts, tags, postsHavingSameTag] =
  await Promise.all([
    getAllBlocksByBlockId(post.PageId),
    getAllPosts(),
    getRankedPosts(),
    getPosts(5),
    getAllTags(),
    getPostsByTag(post.Tags[0]?.name, 6),
  ])

// 目次用の見出しブロックを抽出 (h1, h2, h3)
const tocHeadings = blocks.filter(
  (block) =>
    block.Type === 'heading_1' ||
    block.Type === 'heading_2' ||
    block.Type === 'heading_3'
);
console.log("tocHeadings:", JSON.stringify(tocHeadings, null, 2)); // デバッグ用

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File;
    // Ensure File object and its Url exist
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url;
  });

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block, index) => {
      // Access File property safely
      const fileDetails = block.Image?.File || block.File?.File;
      if (!fileDetails || !fileDetails.ExpiryTime) {
        // If ExpiryTime is not available, or fileDetails is undefined,
        // it implies we might need to fetch the block again or handle as an error.
        // For now, assume getBlock(block.Id) is the fallback.
        return getBlock(block.Id);
      }
      const expiryTime = fileDetails.ExpiryTime;
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block);
      }
      return getBlock(block.Id);
    })
    .map((promise, index) =>
      promise.then((block) => {
        let url: URL;
        // Access File property safely
        const fileDetails = block.Image?.File || block.File?.File;
        if (!fileDetails || !fileDetails.Url) {
          console.log('Invalid file URL after getBlock or from cache');
          return Promise.reject(new Error('Invalid file URL'));
        }
        try {
          url = new URL(fileDetails.Url);
        } catch {
          console.log('Invalid file URL: ', fileDetails.Url);
          return Promise.reject(new Error('Malformed file URL'));
        }
        return Promise.resolve({ url, index });
      })
    )
    .map((promise) => promise.then(({ url, index }) => downloadFile(url, slug, index + 1)))
);

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug);
const prevPost = allPosts[currentPostIndex + 1];
const nextPost = allPosts[currentPostIndex - 1];

let ogImage = '';
if (post.FeaturedImage && post.FeaturedImage.Url) {
  // Convert URL object to string for ogImage
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site).toString();
}

// JSON-LD データの生成
const siteOrigin = Astro.site ? Astro.site.origin : ''; // Astro.site.origin を使う
const postPath = getPostLink(post); // パスのみ取得
const postUrl = siteOrigin && postPath ? `${siteOrigin}${postPath}` : ''; // 安全に結合
const defaultOgImagePath = getStaticFilePath('/default-og-image.png');
const defaultOgImageUrl = siteOrigin && defaultOgImagePath ? `${siteOrigin}${defaultOgImagePath}` : ''; // 安全に結合

const jsonLd = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": postUrl
  },
  "headline": post.Title,
  "description": post.MetaDescription || post.Excerpt,
  "image": ogImage || defaultOgImageUrl,
  "author": {
    "@type": "Person",
    "name": "adi" // 著者名を指定
  },
  "publisher": {
    "@type": "Organization",
    // database.Title を使うためには Layout から渡すか、再度 getDatabase() する必要がある
    // 今回は固定値で urapro.dev とするか、 Astro.site のホスト名を使う
    "name": Astro.site ? new URL(Astro.site).hostname : "urapro.dev", 
    "logo": {
      "@type": "ImageObject",
      "url": defaultOgImageUrl // サイトロゴのURL（デフォルトOGP画像で代用）
    }
  },
  "datePublished": new Date(post.Date).toISOString(),
  "dateModified": new Date(post.LastEditedDate || post.Date).toISOString()
};

// パンくずリストのJSON-LDデータ
const breadcrumbLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": Astro.site ? new URL(Astro.site).hostname : "Home", // または database.Title
      "item": siteOrigin || "/"
    },
    {
      "@type": "ListItem",
      "position": 2,
      "name": post.Title,
      "item": postUrl
    }
  ]
};

---

<Layout
  title={post.Title}
  path={getPostLink(post)}
  description={post.Excerpt}
  metaDescription={post.MetaDescription || post.Excerpt}
  ogImage={ogImage}
>
  <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} slot="head-append" />
  <script type="application/ld+json" set:html={JSON.stringify(breadcrumbLd)} slot="head-append" />

  <div slot="main" class={`${styles.main} ${styles.postPage}`}>
    <div class={styles.post}>
      <PostTitle post={post} enableLink={false} />
      <div style="display: flex; flex-wrap: wrap; column-gap: 1em;">
        <PostDate post={post} />
        <PostUpdateDate post={post} />
      </div>
      <PostTags post={post} enableLink={true} />
      <PostBody blocks={blocks} slug={slug} />
      <SocialShareButtons title={post.Title} url={getPostFullLink(post)} tags={post.Tags} socialShareHashtags={post.SocialShareHashtags} client:load/>

      <footer>
        <PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
      </footer>
    </div>
  </div>

  <div slot="aside" class="aside">
    <TableOfContentsSidebar headings={tocHeadings} />
    <BlogPostsLink heading="最新記事" posts={recentPosts} />
    <BlogPostsLink heading="おすすめ記事" posts={rankedPosts} />
    <BlogTagsLink heading="カテゴリー" tags={tags} />
  </div>
</Layout>
